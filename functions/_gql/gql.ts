/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n      query GetDecisionsTexts {\n        decision {\n          id\n          description\n        }\n      }\n    ": types.GetDecisionsTextsDocument,
    "\n          mutation UpdateDecisionTexts($id: uuid!, $values: decision_set_input!) {\n            update_decision_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        ": types.UpdateDecisionTextsDocument,
    "\n      query GetMeetingsStepsTexts {\n        meeting_step {\n          id\n          notes\n        }\n      }\n    ": types.GetMeetingsStepsTextsDocument,
    "\n          mutation UpdateMeetingStepsTexts($id: uuid!, $values: meeting_step_set_input!) {\n            update_meeting_step_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        ": types.UpdateMeetingStepsTextsDocument,
    "\n      query GetRolesTexts {\n        role {\n          id\n          purpose\n          domain\n          accountabilities\n          checklist\n          indicators\n          notes\n        }\n      }\n    ": types.GetRolesTextsDocument,
    "\n          mutation UpdateRoleTexts($id: uuid!, $values: role_set_input!) {\n            update_role_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        ": types.UpdateRoleTextsDocument,
    "\n      query GetTasksTexts {\n        task {\n          id\n          description\n        }\n      }\n    ": types.GetTasksTextsDocument,
    "\n          mutation UpdateTaskTexts($id: uuid!, $values: task_set_input!) {\n            update_task_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        ": types.UpdateTaskTextsDocument,
    "\n      query GetThreadsActivitiesTexts {\n        thread_activity(where: { type: { _eq: \"Message\" } }) {\n          id\n          data\n        }\n      }\n    ": types.GetThreadsActivitiesTextsDocument,
    "\n          mutation UpdateThreadsActivitiesTexts($id: uuid!, $values: thread_activity_set_input!) {\n            update_thread_activity_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        ": types.UpdateThreadsActivitiesTextsDocument,
    "\n      query GetMemberIdFromUserId($userId: uuid!, $orgId: uuid!) {\n        member(where: { userId: { _eq: $userId }, orgId: { _eq: $orgId } }) {\n          id\n        }\n      }\n    ": types.GetMemberIdFromUserIdDocument,
    "\n        mutation ImportCircles($objects: [circle_insert_input!]!) {\n          insert_circle(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportCirclesDocument,
    "\n          mutation UpdateCircleParentId($id: uuid!, $parentId: uuid!) {\n            update_circle_by_pk(pk_columns: { id: $id }, _set: { parentId: $parentId }) {\n              id\n            }\n          }\n        ": types.UpdateCircleParentIdDocument,
    "\n        mutation ImportDecisions($objects: [decision_insert_input!]!) {\n          insert_decision(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportDecisionsDocument,
    "\n        mutation ImportLogs($objects: [log_insert_input!]!) {\n          insert_log(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportLogsDocument,
    "\n          mutation UpdateLog($id: uuid!, $cancelLogId: uuid!) {\n            update_log_by_pk(pk_columns: { id: $id }, _set: { cancelLogId: $cancelLogId }) {\n              id\n            }\n          }\n        ": types.UpdateLogDocument,
    "\n      mutation ImportMeetingTemplates($objects: [meeting_template_insert_input!]!) {\n        insert_meeting_template(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.ImportMeetingTemplatesDocument,
    "\n      mutation ImportMeetings($objects: [meeting_insert_input!]!) {\n        insert_meeting(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.ImportMeetingsDocument,
    "\n        mutation UpdateMeetingCurrentStep($id: uuid!, $currentStepId: uuid!) {\n          update_meeting_by_pk(pk_columns: { id: $id }, _set: { currentStepId: $currentStepId }) {\n            id\n          }\n        }\n      ": types.UpdateMeetingCurrentStepDocument,
    "\n      mutation InsertMeetingSteps($objects: [meeting_step_insert_input!]!) {\n        insert_meeting_step(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.InsertMeetingStepsDocument,
    "\n        mutation ImportMembers($objects: [member_insert_input!]!) {\n          insert_member(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportMembersDocument,
    "\n        mutation ImportOrgs($objects: [org_insert_input!]!) {\n          insert_org(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportOrgsDocument,
    "\n        mutation ImportRoles($objects: [role_insert_input!]!) {\n          insert_role(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportRolesDocument,
    "\n        mutation ImportTasks($objects: [task_insert_input!]!) {\n          insert_task(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportTasksDocument,
    "\n        mutation ImportTaskViews($objects: [task_view_insert_input!]!) {\n          insert_task_view(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportTaskViewsDocument,
    "\n      mutation ImportThreads($objects: [thread_insert_input!]!) {\n        insert_thread(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.ImportThreadsDocument,
    "\n      mutation ImportThreadActivitiess($objects: [thread_activity_insert_input!]!) {\n        insert_thread_activity(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.ImportThreadActivitiessDocument,
    "\n      mutation ImportPollAnswers($objects: [thread_poll_answer_insert_input!]!) {\n        insert_thread_poll_answer(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.ImportPollAnswersDocument,
    "\n        mutation UpdateThreadLastActivity($id: uuid!, $lastActivityId: uuid!, $lastActivityDate: timestamptz) {\n          update_thread_by_pk(pk_columns: { id: $id }, _set: { lastActivityId: $lastActivityId, lastActivityDate: $lastActivityDate }) {\n            id\n          }\n        }\n      ": types.UpdateThreadLastActivityDocument,
    "\n      mutation ImportMembersStatus($objects: [thread_member_status_insert_input!]!) {\n        insert_thread_member_status(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.ImportMembersStatusDocument,
    "\n        mutation ImportUsers($objects: [users_insert_input!]!) {\n          insertUsers(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      ": types.ImportUsersDocument,
    "\n      mutation SaveOldIds($objects: [old_id_insert_input!]!) {\n        insert_old_id(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    ": types.SaveOldIdsDocument,
    "\n      query GetOldIds {\n        old_id {\n          id\n          oldId\n          type\n        }\n      }\n    ": types.GetOldIdsDocument,
    "\n    query GetFileByName($name: String!) {\n      files(where: { name: { _eq: $name } }) {\n        id\n      }\n    }\n  ": types.GetFileByNameDocument,
    "\n      mutation ImportMemberPicture($id: uuid!, $picture: String!, $pictureFileId: uuid!) {\n        update_member_by_pk(pk_columns: { id: $id }, _set: { picture: $picture, pictureFileId: $pictureFileId }) {\n          id\n        }\n      }\n    ": types.ImportMemberPictureDocument,
    "\n  fragment CircleSearch on circle {\n    id\n    orgId\n    role {\n      name\n    }\n    parent {\n      role {\n        name\n      }\n      parent {\n        role {\n          name\n        }\n      }\n      parent {\n        role {\n          name\n        }\n      }\n    }\n  }\n": types.CircleSearchFragmentDoc,
    "\n        query GetCircleForSearch($id: uuid!) {\n          circle_by_pk(id: $id) {\n            ...CircleSearch\n          }\n        }\n      ": types.GetCircleForSearchDocument,
    "\n        query GetCirclesForSearch {\n          circle(where: { archived: { _eq: false } }) {\n            ...CircleSearch\n          }\n        }\n      ": types.GetCirclesForSearchDocument,
    "\n  fragment DecisionSearch on decision {\n    id\n    orgId\n    title\n  }\n": types.DecisionSearchFragmentDoc,
    "\n        query GetDecisionForSearch($id: uuid!) {\n          decision_by_pk(id: $id) {\n            ...DecisionSearch\n          }\n        }\n      ": types.GetDecisionForSearchDocument,
    "\n        query GetDecisionsForSearch {\n          decision(where: { archived: { _eq: false } }) {\n            ...DecisionSearch\n          }\n        }\n      ": types.GetDecisionsForSearchDocument,
    "\n  fragment MeetingSearch on meeting {\n    id\n    orgId\n    title\n    circle {\n      role {\n        name\n      }\n    }\n    steps {\n      notes\n    }\n  }\n": types.MeetingSearchFragmentDoc,
    "\n        query GetMeetingForSearch($id: uuid!) {\n          meeting_by_pk(id: $id) {\n            ...MeetingSearch\n          }\n        }\n      ": types.GetMeetingForSearchDocument,
    "\n        query GetMeetingsForSearch {\n          meeting(where: { archived: { _eq: false } }) {\n            ...MeetingSearch\n          }\n        }\n      ": types.GetMeetingsForSearchDocument,
    "\n  fragment MemberSearch on member {\n    id\n    orgId\n    name\n  }\n": types.MemberSearchFragmentDoc,
    "\n        query GetMemberForSearch($id: uuid!) {\n          member_by_pk(id: $id) {\n            ...MemberSearch\n          }\n        }\n      ": types.GetMemberForSearchDocument,
    "\n        query GetMembersForSearch {\n          member(where: { archived: { _eq: false } }) {\n            ...MemberSearch\n          }\n        }\n      ": types.GetMembersForSearchDocument,
    "\n  fragment TaskSearch on task {\n    id\n    orgId\n    title\n  }\n": types.TaskSearchFragmentDoc,
    "\n        query GetTaskForSearch($id: uuid!) {\n          task_by_pk(id: $id) {\n            ...TaskSearch\n          }\n        }\n      ": types.GetTaskForSearchDocument,
    "\n        query GetTasksForSearch {\n          task(where: { archived: { _eq: false } }) {\n            ...TaskSearch\n          }\n        }\n      ": types.GetTasksForSearchDocument,
    "\n  fragment ThreadSearch on thread {\n    id\n    orgId\n    title\n  }\n": types.ThreadSearchFragmentDoc,
    "\n        query GetThreadForSearch($id: uuid!) {\n          thread_by_pk(id: $id) {\n            ...ThreadSearch\n          }\n        }\n      ": types.GetThreadForSearchDocument,
    "\n        query GetThreadsForSearch {\n          thread(where: { archived: { _eq: false } }) {\n            ...ThreadSearch\n          }\n        }\n      ": types.GetThreadsForSearchDocument,
    "\n  query getMember($id: uuid!) {\n    member_by_pk(id: $id) {\n      id\n      orgId\n      userId\n      name\n      role\n      inviteDate\n    }\n  }\n": types.GetMemberDocument,
    "\n  query getOrgRole($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      name\n      members(where: {userId: {_eq: $userId}}) {\n        role\n      }\n    }\n  }": types.GetOrgRoleDocument,
    "\n  mutation updateMember($id: uuid!, $values: member_set_input!) {\n    update_member_by_pk(pk_columns: { id: $id }, _set: $values) {\n      id\n    }\n  }\n": types.UpdateMemberDocument,
    "\n  query checkOrgUser($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      members(where: { userId: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n": types.CheckOrgUserDocument,
    "\n  query getUser($id: uuid!) {\n    user(id: $id) {\n      id\n      displayName\n    }\n  }": types.GetUserDocument,
    "\n  mutation createOrg($name: String!, $userId: uuid!, $memberName: String!) {\n    insert_org_one(object: {\n      name: $name\n      archived: false\n      defaultWorkedMinPerWeek: 2100\n      members: {\n        data: [\n          {\n            userId: $userId\n            name: $memberName\n            role: \"Admin\"\n          }\n        ]\n      }\n    }) {\n      id\n    }\n  }": types.CreateOrgDocument,
    "\n  mutation createRole($orgId: uuid!, $name: String!) {\n    insert_role_one(object: {\n      orgId: $orgId\n      name: $name\n    }) {\n      id\n    }\n  }": types.CreateRoleDocument,
    "\n  mutation createRoles($roles: [role_insert_input!]!) {\n    insert_role(objects: $roles) {\n      returning {\n        id\n      }\n    }\n  }": types.CreateRolesDocument,
    "\n  mutation createCircle($orgId: uuid!, $roleId: uuid!) {\n    insert_circle_one(object: {\n      orgId: $orgId\n      roleId: $roleId\n    }) {\n      id\n    }\n  }": types.CreateCircleDocument,
    "\n  query getMemberByUserId($orgId: uuid!, $userId: uuid!) {\n    member(where: { orgId: { _eq: $orgId }, userId: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n": types.GetMemberByUserIdDocument,
    "\n  query getOrgAndCircles($id: uuid!) {\n    org_by_pk(id: $id) {\n      name\n      slug\n      circles(where: { archived: { _eq: false } }) {\n        id\n        roleId\n        parentId\n        members(where: { archived: { _eq: false } }) {\n          id\n          memberId\n        }\n        role {\n          name\n          singleMember\n          link\n        }\n      }\n      meetings(\n        where: { archived: { _eq: false } }\n        order_by: { startDate: asc }\n      ) {\n        id\n        orgId\n        circleId\n        participantsScope\n        participantsMembersIds\n        initiatorMemberId\n        facilitatorMemberId\n        createdAt\n        startDate\n        endDate\n        ended\n        title\n        attendees\n        stepsConfig\n        currentStepId\n        archived\n        videoConf\n      }\n    }\n  }\n": types.GetOrgAndCirclesDocument,
    "\n  query getRecipients($memberIds: [uuid!]!) {\n    member(where: { id: { _in: $memberIds } }) {\n      user {\n        id\n        email\n      }\n    }\n  }\n": types.GetRecipientsDocument,
    "\n  mutation startMembersMeeting($membersIds: [uuid!]!, $meetingId: uuid!) {\n    update_member(\n      where: { id: { _in: $membersIds } }\n      _set: { meetingId: $meetingId }\n    ) {\n      returning {\n        id\n      }\n    }\n  }": types.StartMembersMeetingDocument,
    "\n  mutation stopMembersMeeting($meetingId: uuid!) {\n    update_member(\n      where: { meetingId: { _eq: $meetingId } }\n      _set: { meetingId: null }\n    ) {\n      returning {\n        id\n      }\n    }\n  }": types.StopMembersMeetingDocument,
    "\n  mutation updateOrgSlug($id: uuid!, $slug: String!) {\n    update_org_by_pk(pk_columns: { id: $id }, _set: { slug: $slug }) {\n      id\n    }\n  }": types.UpdateOrgSlugDocument,
};

export function gql(source: "\n      query GetDecisionsTexts {\n        decision {\n          id\n          description\n        }\n      }\n    "): (typeof documents)["\n      query GetDecisionsTexts {\n        decision {\n          id\n          description\n        }\n      }\n    "];
export function gql(source: "\n          mutation UpdateDecisionTexts($id: uuid!, $values: decision_set_input!) {\n            update_decision_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateDecisionTexts($id: uuid!, $values: decision_set_input!) {\n            update_decision_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n      query GetMeetingsStepsTexts {\n        meeting_step {\n          id\n          notes\n        }\n      }\n    "): (typeof documents)["\n      query GetMeetingsStepsTexts {\n        meeting_step {\n          id\n          notes\n        }\n      }\n    "];
export function gql(source: "\n          mutation UpdateMeetingStepsTexts($id: uuid!, $values: meeting_step_set_input!) {\n            update_meeting_step_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateMeetingStepsTexts($id: uuid!, $values: meeting_step_set_input!) {\n            update_meeting_step_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n      query GetRolesTexts {\n        role {\n          id\n          purpose\n          domain\n          accountabilities\n          checklist\n          indicators\n          notes\n        }\n      }\n    "): (typeof documents)["\n      query GetRolesTexts {\n        role {\n          id\n          purpose\n          domain\n          accountabilities\n          checklist\n          indicators\n          notes\n        }\n      }\n    "];
export function gql(source: "\n          mutation UpdateRoleTexts($id: uuid!, $values: role_set_input!) {\n            update_role_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateRoleTexts($id: uuid!, $values: role_set_input!) {\n            update_role_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n      query GetTasksTexts {\n        task {\n          id\n          description\n        }\n      }\n    "): (typeof documents)["\n      query GetTasksTexts {\n        task {\n          id\n          description\n        }\n      }\n    "];
export function gql(source: "\n          mutation UpdateTaskTexts($id: uuid!, $values: task_set_input!) {\n            update_task_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateTaskTexts($id: uuid!, $values: task_set_input!) {\n            update_task_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n      query GetThreadsActivitiesTexts {\n        thread_activity(where: { type: { _eq: \"Message\" } }) {\n          id\n          data\n        }\n      }\n    "): (typeof documents)["\n      query GetThreadsActivitiesTexts {\n        thread_activity(where: { type: { _eq: \"Message\" } }) {\n          id\n          data\n        }\n      }\n    "];
export function gql(source: "\n          mutation UpdateThreadsActivitiesTexts($id: uuid!, $values: thread_activity_set_input!) {\n            update_thread_activity_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateThreadsActivitiesTexts($id: uuid!, $values: thread_activity_set_input!) {\n            update_thread_activity_by_pk(pk_columns: { id: $id }, _set: $values) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n      query GetMemberIdFromUserId($userId: uuid!, $orgId: uuid!) {\n        member(where: { userId: { _eq: $userId }, orgId: { _eq: $orgId } }) {\n          id\n        }\n      }\n    "): (typeof documents)["\n      query GetMemberIdFromUserId($userId: uuid!, $orgId: uuid!) {\n        member(where: { userId: { _eq: $userId }, orgId: { _eq: $orgId } }) {\n          id\n        }\n      }\n    "];
export function gql(source: "\n        mutation ImportCircles($objects: [circle_insert_input!]!) {\n          insert_circle(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportCircles($objects: [circle_insert_input!]!) {\n          insert_circle(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n          mutation UpdateCircleParentId($id: uuid!, $parentId: uuid!) {\n            update_circle_by_pk(pk_columns: { id: $id }, _set: { parentId: $parentId }) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateCircleParentId($id: uuid!, $parentId: uuid!) {\n            update_circle_by_pk(pk_columns: { id: $id }, _set: { parentId: $parentId }) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n        mutation ImportDecisions($objects: [decision_insert_input!]!) {\n          insert_decision(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportDecisions($objects: [decision_insert_input!]!) {\n          insert_decision(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n        mutation ImportLogs($objects: [log_insert_input!]!) {\n          insert_log(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportLogs($objects: [log_insert_input!]!) {\n          insert_log(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n          mutation UpdateLog($id: uuid!, $cancelLogId: uuid!) {\n            update_log_by_pk(pk_columns: { id: $id }, _set: { cancelLogId: $cancelLogId }) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateLog($id: uuid!, $cancelLogId: uuid!) {\n            update_log_by_pk(pk_columns: { id: $id }, _set: { cancelLogId: $cancelLogId }) {\n              id\n            }\n          }\n        "];
export function gql(source: "\n      mutation ImportMeetingTemplates($objects: [meeting_template_insert_input!]!) {\n        insert_meeting_template(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportMeetingTemplates($objects: [meeting_template_insert_input!]!) {\n        insert_meeting_template(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n      mutation ImportMeetings($objects: [meeting_insert_input!]!) {\n        insert_meeting(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportMeetings($objects: [meeting_insert_input!]!) {\n        insert_meeting(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n        mutation UpdateMeetingCurrentStep($id: uuid!, $currentStepId: uuid!) {\n          update_meeting_by_pk(pk_columns: { id: $id }, _set: { currentStepId: $currentStepId }) {\n            id\n          }\n        }\n      "): (typeof documents)["\n        mutation UpdateMeetingCurrentStep($id: uuid!, $currentStepId: uuid!) {\n          update_meeting_by_pk(pk_columns: { id: $id }, _set: { currentStepId: $currentStepId }) {\n            id\n          }\n        }\n      "];
export function gql(source: "\n      mutation InsertMeetingSteps($objects: [meeting_step_insert_input!]!) {\n        insert_meeting_step(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation InsertMeetingSteps($objects: [meeting_step_insert_input!]!) {\n        insert_meeting_step(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n        mutation ImportMembers($objects: [member_insert_input!]!) {\n          insert_member(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportMembers($objects: [member_insert_input!]!) {\n          insert_member(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n        mutation ImportOrgs($objects: [org_insert_input!]!) {\n          insert_org(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportOrgs($objects: [org_insert_input!]!) {\n          insert_org(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n        mutation ImportRoles($objects: [role_insert_input!]!) {\n          insert_role(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportRoles($objects: [role_insert_input!]!) {\n          insert_role(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n        mutation ImportTasks($objects: [task_insert_input!]!) {\n          insert_task(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportTasks($objects: [task_insert_input!]!) {\n          insert_task(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n        mutation ImportTaskViews($objects: [task_view_insert_input!]!) {\n          insert_task_view(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportTaskViews($objects: [task_view_insert_input!]!) {\n          insert_task_view(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n      mutation ImportThreads($objects: [thread_insert_input!]!) {\n        insert_thread(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportThreads($objects: [thread_insert_input!]!) {\n        insert_thread(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n      mutation ImportThreadActivitiess($objects: [thread_activity_insert_input!]!) {\n        insert_thread_activity(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportThreadActivitiess($objects: [thread_activity_insert_input!]!) {\n        insert_thread_activity(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n      mutation ImportPollAnswers($objects: [thread_poll_answer_insert_input!]!) {\n        insert_thread_poll_answer(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportPollAnswers($objects: [thread_poll_answer_insert_input!]!) {\n        insert_thread_poll_answer(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n        mutation UpdateThreadLastActivity($id: uuid!, $lastActivityId: uuid!, $lastActivityDate: timestamptz) {\n          update_thread_by_pk(pk_columns: { id: $id }, _set: { lastActivityId: $lastActivityId, lastActivityDate: $lastActivityDate }) {\n            id\n          }\n        }\n      "): (typeof documents)["\n        mutation UpdateThreadLastActivity($id: uuid!, $lastActivityId: uuid!, $lastActivityDate: timestamptz) {\n          update_thread_by_pk(pk_columns: { id: $id }, _set: { lastActivityId: $lastActivityId, lastActivityDate: $lastActivityDate }) {\n            id\n          }\n        }\n      "];
export function gql(source: "\n      mutation ImportMembersStatus($objects: [thread_member_status_insert_input!]!) {\n        insert_thread_member_status(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportMembersStatus($objects: [thread_member_status_insert_input!]!) {\n        insert_thread_member_status(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n        mutation ImportUsers($objects: [users_insert_input!]!) {\n          insertUsers(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ImportUsers($objects: [users_insert_input!]!) {\n          insertUsers(objects: $objects) {\n            returning {\n              id\n            }\n          }\n        }\n      "];
export function gql(source: "\n      mutation SaveOldIds($objects: [old_id_insert_input!]!) {\n        insert_old_id(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation SaveOldIds($objects: [old_id_insert_input!]!) {\n        insert_old_id(objects: $objects) {\n          returning {\n            id\n          }\n        }\n      }\n    "];
export function gql(source: "\n      query GetOldIds {\n        old_id {\n          id\n          oldId\n          type\n        }\n      }\n    "): (typeof documents)["\n      query GetOldIds {\n        old_id {\n          id\n          oldId\n          type\n        }\n      }\n    "];
export function gql(source: "\n    query GetFileByName($name: String!) {\n      files(where: { name: { _eq: $name } }) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query GetFileByName($name: String!) {\n      files(where: { name: { _eq: $name } }) {\n        id\n      }\n    }\n  "];
export function gql(source: "\n      mutation ImportMemberPicture($id: uuid!, $picture: String!, $pictureFileId: uuid!) {\n        update_member_by_pk(pk_columns: { id: $id }, _set: { picture: $picture, pictureFileId: $pictureFileId }) {\n          id\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportMemberPicture($id: uuid!, $picture: String!, $pictureFileId: uuid!) {\n        update_member_by_pk(pk_columns: { id: $id }, _set: { picture: $picture, pictureFileId: $pictureFileId }) {\n          id\n        }\n      }\n    "];
export function gql(source: "\n  fragment CircleSearch on circle {\n    id\n    orgId\n    role {\n      name\n    }\n    parent {\n      role {\n        name\n      }\n      parent {\n        role {\n          name\n        }\n      }\n      parent {\n        role {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CircleSearch on circle {\n    id\n    orgId\n    role {\n      name\n    }\n    parent {\n      role {\n        name\n      }\n      parent {\n        role {\n          name\n        }\n      }\n      parent {\n        role {\n          name\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n        query GetCircleForSearch($id: uuid!) {\n          circle_by_pk(id: $id) {\n            ...CircleSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetCircleForSearch($id: uuid!) {\n          circle_by_pk(id: $id) {\n            ...CircleSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetCirclesForSearch {\n          circle(where: { archived: { _eq: false } }) {\n            ...CircleSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetCirclesForSearch {\n          circle(where: { archived: { _eq: false } }) {\n            ...CircleSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment DecisionSearch on decision {\n    id\n    orgId\n    title\n  }\n"): (typeof documents)["\n  fragment DecisionSearch on decision {\n    id\n    orgId\n    title\n  }\n"];
export function gql(source: "\n        query GetDecisionForSearch($id: uuid!) {\n          decision_by_pk(id: $id) {\n            ...DecisionSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetDecisionForSearch($id: uuid!) {\n          decision_by_pk(id: $id) {\n            ...DecisionSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetDecisionsForSearch {\n          decision(where: { archived: { _eq: false } }) {\n            ...DecisionSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetDecisionsForSearch {\n          decision(where: { archived: { _eq: false } }) {\n            ...DecisionSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment MeetingSearch on meeting {\n    id\n    orgId\n    title\n    circle {\n      role {\n        name\n      }\n    }\n    steps {\n      notes\n    }\n  }\n"): (typeof documents)["\n  fragment MeetingSearch on meeting {\n    id\n    orgId\n    title\n    circle {\n      role {\n        name\n      }\n    }\n    steps {\n      notes\n    }\n  }\n"];
export function gql(source: "\n        query GetMeetingForSearch($id: uuid!) {\n          meeting_by_pk(id: $id) {\n            ...MeetingSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMeetingForSearch($id: uuid!) {\n          meeting_by_pk(id: $id) {\n            ...MeetingSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetMeetingsForSearch {\n          meeting(where: { archived: { _eq: false } }) {\n            ...MeetingSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMeetingsForSearch {\n          meeting(where: { archived: { _eq: false } }) {\n            ...MeetingSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment MemberSearch on member {\n    id\n    orgId\n    name\n  }\n"): (typeof documents)["\n  fragment MemberSearch on member {\n    id\n    orgId\n    name\n  }\n"];
export function gql(source: "\n        query GetMemberForSearch($id: uuid!) {\n          member_by_pk(id: $id) {\n            ...MemberSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMemberForSearch($id: uuid!) {\n          member_by_pk(id: $id) {\n            ...MemberSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetMembersForSearch {\n          member(where: { archived: { _eq: false } }) {\n            ...MemberSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMembersForSearch {\n          member(where: { archived: { _eq: false } }) {\n            ...MemberSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment TaskSearch on task {\n    id\n    orgId\n    title\n  }\n"): (typeof documents)["\n  fragment TaskSearch on task {\n    id\n    orgId\n    title\n  }\n"];
export function gql(source: "\n        query GetTaskForSearch($id: uuid!) {\n          task_by_pk(id: $id) {\n            ...TaskSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetTaskForSearch($id: uuid!) {\n          task_by_pk(id: $id) {\n            ...TaskSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetTasksForSearch {\n          task(where: { archived: { _eq: false } }) {\n            ...TaskSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetTasksForSearch {\n          task(where: { archived: { _eq: false } }) {\n            ...TaskSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment ThreadSearch on thread {\n    id\n    orgId\n    title\n  }\n"): (typeof documents)["\n  fragment ThreadSearch on thread {\n    id\n    orgId\n    title\n  }\n"];
export function gql(source: "\n        query GetThreadForSearch($id: uuid!) {\n          thread_by_pk(id: $id) {\n            ...ThreadSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetThreadForSearch($id: uuid!) {\n          thread_by_pk(id: $id) {\n            ...ThreadSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetThreadsForSearch {\n          thread(where: { archived: { _eq: false } }) {\n            ...ThreadSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetThreadsForSearch {\n          thread(where: { archived: { _eq: false } }) {\n            ...ThreadSearch\n          }\n        }\n      "];
export function gql(source: "\n  query getMember($id: uuid!) {\n    member_by_pk(id: $id) {\n      id\n      orgId\n      userId\n      name\n      role\n      inviteDate\n    }\n  }\n"): (typeof documents)["\n  query getMember($id: uuid!) {\n    member_by_pk(id: $id) {\n      id\n      orgId\n      userId\n      name\n      role\n      inviteDate\n    }\n  }\n"];
export function gql(source: "\n  query getOrgRole($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      name\n      members(where: {userId: {_eq: $userId}}) {\n        role\n      }\n    }\n  }"): (typeof documents)["\n  query getOrgRole($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      name\n      members(where: {userId: {_eq: $userId}}) {\n        role\n      }\n    }\n  }"];
export function gql(source: "\n  mutation updateMember($id: uuid!, $values: member_set_input!) {\n    update_member_by_pk(pk_columns: { id: $id }, _set: $values) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation updateMember($id: uuid!, $values: member_set_input!) {\n    update_member_by_pk(pk_columns: { id: $id }, _set: $values) {\n      id\n    }\n  }\n"];
export function gql(source: "\n  query checkOrgUser($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      members(where: { userId: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query checkOrgUser($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      members(where: { userId: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n"];
export function gql(source: "\n  query getUser($id: uuid!) {\n    user(id: $id) {\n      id\n      displayName\n    }\n  }"): (typeof documents)["\n  query getUser($id: uuid!) {\n    user(id: $id) {\n      id\n      displayName\n    }\n  }"];
export function gql(source: "\n  mutation createOrg($name: String!, $userId: uuid!, $memberName: String!) {\n    insert_org_one(object: {\n      name: $name\n      archived: false\n      defaultWorkedMinPerWeek: 2100\n      members: {\n        data: [\n          {\n            userId: $userId\n            name: $memberName\n            role: \"Admin\"\n          }\n        ]\n      }\n    }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation createOrg($name: String!, $userId: uuid!, $memberName: String!) {\n    insert_org_one(object: {\n      name: $name\n      archived: false\n      defaultWorkedMinPerWeek: 2100\n      members: {\n        data: [\n          {\n            userId: $userId\n            name: $memberName\n            role: \"Admin\"\n          }\n        ]\n      }\n    }) {\n      id\n    }\n  }"];
export function gql(source: "\n  mutation createRole($orgId: uuid!, $name: String!) {\n    insert_role_one(object: {\n      orgId: $orgId\n      name: $name\n    }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation createRole($orgId: uuid!, $name: String!) {\n    insert_role_one(object: {\n      orgId: $orgId\n      name: $name\n    }) {\n      id\n    }\n  }"];
export function gql(source: "\n  mutation createRoles($roles: [role_insert_input!]!) {\n    insert_role(objects: $roles) {\n      returning {\n        id\n      }\n    }\n  }"): (typeof documents)["\n  mutation createRoles($roles: [role_insert_input!]!) {\n    insert_role(objects: $roles) {\n      returning {\n        id\n      }\n    }\n  }"];
export function gql(source: "\n  mutation createCircle($orgId: uuid!, $roleId: uuid!) {\n    insert_circle_one(object: {\n      orgId: $orgId\n      roleId: $roleId\n    }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation createCircle($orgId: uuid!, $roleId: uuid!) {\n    insert_circle_one(object: {\n      orgId: $orgId\n      roleId: $roleId\n    }) {\n      id\n    }\n  }"];
export function gql(source: "\n  query getMemberByUserId($orgId: uuid!, $userId: uuid!) {\n    member(where: { orgId: { _eq: $orgId }, userId: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query getMemberByUserId($orgId: uuid!, $userId: uuid!) {\n    member(where: { orgId: { _eq: $orgId }, userId: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"];
export function gql(source: "\n  query getOrgAndCircles($id: uuid!) {\n    org_by_pk(id: $id) {\n      name\n      slug\n      circles(where: { archived: { _eq: false } }) {\n        id\n        roleId\n        parentId\n        members(where: { archived: { _eq: false } }) {\n          id\n          memberId\n        }\n        role {\n          name\n          singleMember\n          link\n        }\n      }\n      meetings(\n        where: { archived: { _eq: false } }\n        order_by: { startDate: asc }\n      ) {\n        id\n        orgId\n        circleId\n        participantsScope\n        participantsMembersIds\n        initiatorMemberId\n        facilitatorMemberId\n        createdAt\n        startDate\n        endDate\n        ended\n        title\n        attendees\n        stepsConfig\n        currentStepId\n        archived\n        videoConf\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOrgAndCircles($id: uuid!) {\n    org_by_pk(id: $id) {\n      name\n      slug\n      circles(where: { archived: { _eq: false } }) {\n        id\n        roleId\n        parentId\n        members(where: { archived: { _eq: false } }) {\n          id\n          memberId\n        }\n        role {\n          name\n          singleMember\n          link\n        }\n      }\n      meetings(\n        where: { archived: { _eq: false } }\n        order_by: { startDate: asc }\n      ) {\n        id\n        orgId\n        circleId\n        participantsScope\n        participantsMembersIds\n        initiatorMemberId\n        facilitatorMemberId\n        createdAt\n        startDate\n        endDate\n        ended\n        title\n        attendees\n        stepsConfig\n        currentStepId\n        archived\n        videoConf\n      }\n    }\n  }\n"];
export function gql(source: "\n  query getRecipients($memberIds: [uuid!]!) {\n    member(where: { id: { _in: $memberIds } }) {\n      user {\n        id\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRecipients($memberIds: [uuid!]!) {\n    member(where: { id: { _in: $memberIds } }) {\n      user {\n        id\n        email\n      }\n    }\n  }\n"];
export function gql(source: "\n  mutation startMembersMeeting($membersIds: [uuid!]!, $meetingId: uuid!) {\n    update_member(\n      where: { id: { _in: $membersIds } }\n      _set: { meetingId: $meetingId }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"): (typeof documents)["\n  mutation startMembersMeeting($membersIds: [uuid!]!, $meetingId: uuid!) {\n    update_member(\n      where: { id: { _in: $membersIds } }\n      _set: { meetingId: $meetingId }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"];
export function gql(source: "\n  mutation stopMembersMeeting($meetingId: uuid!) {\n    update_member(\n      where: { meetingId: { _eq: $meetingId } }\n      _set: { meetingId: null }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"): (typeof documents)["\n  mutation stopMembersMeeting($meetingId: uuid!) {\n    update_member(\n      where: { meetingId: { _eq: $meetingId } }\n      _set: { meetingId: null }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"];
export function gql(source: "\n  mutation updateOrgSlug($id: uuid!, $slug: String!) {\n    update_org_by_pk(pk_columns: { id: $id }, _set: { slug: $slug }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation updateOrgSlug($id: uuid!, $slug: String!) {\n    update_org_by_pk(pk_columns: { id: $id }, _set: { slug: $slug }) {\n      id\n    }\n  }"];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;